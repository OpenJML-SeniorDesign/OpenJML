name: Build OpenJML

on:
  push:
    branches: [ master-module ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        ## Note that the GitHub realease needs to be create by one job
        ## before each job can populate the release with the OpenJML build
        ## for the corresponding OS. At present ubuntu-latest is used so
        ## it must be in matrix.os
        ## TODO: Windows jobs fail 
        ##os: [ubuntu-latest]
        ##os: [ubuntu-latest, windows-latest, ubuntu-16.04]
        ##os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest, ubuntu-18.04, windows-latest]

      fail-fast: false
    steps:
    - name: Manually sync certs
      if: runner.os == 'Linux'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - name: MacOSX additions
      if: runner.os == 'MacOS'
      run: |
        brew install coreutils
    - name: Linux additions
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libxext-dev libxtst-dev libxrandr-dev libcups2-dev
        sudo apt-get install libasound2-dev autoconf
    - name: Setup Cygwin for Windows
      if: runner.os == 'Windows'
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: cmake python3
    - uses: actions/setup-python@v1
    - name: Set up JDK16 
      uses: actions/setup-java@v1
      with:
        java-version: 1.16
    - name: Checkout OpenJML
      run: |
        git config --global core.autocrlf input
        git clone -b master-module --depth 1 https://github.com/OpenJML/OpenJML
        git clone -b master-module --depth 1 https://github.com/OpenJML/Specs
        git clone --depth 1 https://github.com/OpenJML/Solvers
        git clone --depth 1 https://github.com/OpenJML/JMLAnnotations
        pwd.exe
        ls.exe -Al
    - name: Create the GitHub release
      ## Do this for just one element of the matrix
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        echo Version $ver
        # Create new GitHub version
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$ver\", \"target_commitish\":\"master-module\", \"name\":\"OpenJML $ver\", \"draft\":true, \"body\":\"Publishing release $ver\"}" "https://api.github.com/repos/OpenJML/OpenJML/releases"
    - name: Build OpenJML release on Windows
      if: runner.os == 'Windows'
      run: |
        basic() {
          cd D:/a/OpenJML/OpenJML
          pwd
          ls -la
          cd OpenJDKModule
          bash ./configure
          make release 
        }
        basic
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
    - name: Build OpenJML release on non-Windows
      if: runner.os != 'Windows'
      run: |
        cd OpenJML/OpenJDKModule
        bash ./configure
        make release 
    - name: Smoke Test release
      run: |
        make -C OpenJML/OpenJDKModule trial
    - name: Load OpenJML build into GitHub release
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        cd OpenJDKModule/release-temp
        export f=openjml-${{ matrix.os }}-${ver}.zip
        mv *.zip $f
        export id=`curl --silent "https://api.github.com/repos/OpenJML/OpenJML/releases" --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' |grep '"id":' | head -1 | sed -e 's/.*: //' -e 's/,//'`
        export upload_url="https://uploads.github.com/repos/OpenJML/OpenJML/releases/$id/assets"
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" --data-binary @$f  "$upload_url?name=$f&label=$f" 
    - name: Check current GitHub release number against version.txt
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        export tag=$var
        export tag=`curl --silent --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' "https://api.github.com/repos/OpenJML/OpenJML/releases" | grep tag_name | head -1 | sed -e 's/.*: \"//' -e 's/\",//'`
        echo $ver $tag
        test "$ver" = "$tag" || echo Version $ver is not the current release, which is $tag
