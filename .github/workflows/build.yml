name: Build OpenJML

on:
  push:
    branches: [ master-module ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        ## TODO: Windows jobs fail 
        ##os: [ubuntu-latest]
        ##os: [ubuntu-latest, windows-latest, ubuntu-16.04]
        ##os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest, macos-latest]

      fail-fast: false
    steps:
    - name: Manually sync certs
      if: runner.os == 'Linux'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - name: Linux additions
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libxext-dev libxtst-dev libxrandr-dev libcups2-dev
        sudo apt-get install libasound2-dev
    - name: Setup Cygwin for WIndows
      if: runner.os == 'Windows'
      run: |
        & cmd /c 'nslookup www.cygwin.com 2>&1'
        while ($true)
          {
              try
              {
                  (New-Object Net.WebClient).DownloadFile('http://www.cygwin.com/setup-x86_64.exe', 'setup-x86_64.exe')
                  break
              }
              catch
              {
                  Write-Host "There is an error during package downloading:`n $_"
              }
          }
        & cmd /c 'nslookup www.cygwin.com 8.8.8.8 2>&1'
      shell: powershell
    - uses: actions/setup-python@v1
    - name: Set up JDK16 
      uses: actions/setup-java@v1
      with:
        java-version: 1.16
    - name: Checkout OpenJML
      run: |
        git clone -b master-module --depth 1 https://github.com/OpenJML/OpenJML
        git clone -b master-module --depth 1 https://github.com/OpenJML/Specs
        git clone --depth 1 https://github.com/OpenJML/Solvers
    - name: Create the release
      ## Do this for just one element of the matrix
      if: runner.os == 'Linux'
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        echo Version $ver
        # Create new version
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$ver\", \"target_commitish\":\"master-module\", \"name\":\"OpenJML $ver\", \"draft\":true, \"body\":\"Publishing release $ver\"}" "https://api.github.com/repos/OpenJML/OpenJML/releases"
    - name: Build OpenJML Windows
      if: runner.os == 'Windows'
      run: |
        cd OpenJML/OpenJDKModule
        bash ./configure
    - name: Build OpenJML
      if: runner.os != 'Windows'
      run: |
        cd OpenJML/OpenJDKModule
        bash ./configure
    - name: Build release
      run: |
        make -C OpenJML/OpenJDKModule release 
    - name: Test release
      run: |
        make -C OpenJML/OpenJDKModule trial
    - name: Publish release
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        cd OpenJDKModule/release-temp
        export f=openjml-${{ matrix.os }}-${ver}.zip
        mv *.zip $f
        export id=`curl --silent "https://api.github.com/repos/OpenJML/OpenJML/releases" --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' |grep '"id":' | head -1 | sed -e 's/.*: //' -e 's/,//'`
        export upload_url="https://uploads.github.com/repos/OpenJML/OpenJML/releases/$id/assets"
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" --data-binary @$f  "$upload_url?name=$f&label=$f" 
    - name: Check current release
      if: 0 == 1
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        export tag=$var
        export tag=`curl --silent --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' "https://api.github.com/repos/OpenJML/OpenJML/releases" | grep tag_name | head -1 | sed -e 's/.*: \"//' -e 's/\",//'`
        echo $ver $tag
        test "$ver" = "$tag" || echo Version $ver is not the current release, which is $tag
        test "$ver" = "$tag"
